apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: rustling-gould-53e001
spec:
    name: arska
    retentionRules:
        - everySeconds: 2.592e+06
          type: expire
    storageType: ""
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: boring-poincare-93e001
spec:
    charts:
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
              suffix: Wh
          colorMapping:
            sellingW-period_avg-arska--mean-: rgb(125, 80, 190)
            sellingWh-period_avg-arska--mean-: rgb(49, 192, 246)
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: mAkEIg6DOriFkyHYpaHe1
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: F9pqxdAjfZSEnEnQ_8rWI
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: bvaK86JA4QnVgxkoFWiq-
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 12
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: Sales per hour kWh
          note: Requires Shelly 3EM or other supported energy meter
          noteOnEmpty: true
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "arska")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "period_avg")
                  |> filter(fn: (r) => r["_field"] == "sellingW" or r["_field"] == "sellingWh")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 11
          widthRatio: 1
          xCol: _time
          yCol: _value
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
              suffix: c/kWh
          colorMapping:
            price-period_price-mean-: '#31C0F6'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: mAkEIg6DOriFkyHYpaHe1
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: F9pqxdAjfZSEnEnQ_8rWI
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: bvaK86JA4QnVgxkoFWiq-
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 5
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: 'Price c/kWh (source: EntsoE)'
          note: day-ahead prices from EntsoE Transparency API
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "arska")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "period_price")
                  |> filter(fn: (r) => r["_field"] == "price")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 11
          widthRatio: 1
          xCol: _time
          yCol: _value
          yPos: 12
        - axes:
            - base: "10"
              name: x
              scale: linear
            - name: "y"
              scale: linear
          colorMapping:
            ch1-period_avg-arska--mean-: '#A500A5'
            ch2-period_avg-arska--mean-: '#31C0F6'
            ch3-period_avg-arska--mean-: rgb(219, 79, 89)
            ch4-period_avg-arska--mean-: rgb(181, 52, 136)
            ch5-period_avg-arska--mean-: rgb(49, 192, 246)
            ch6-period_avg-arska--mean-: rgb(140, 66, 177)
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 1FF0phR5AlRG9TK63U76h
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: 8uvs-HVwtP4v70jq1aW7e
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: 2VWKhatmJ-03K2_Jq9gV-
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 5
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: Channel utilization
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: "from(bucket: \"arska\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"period_avg\") \n  |> filter(fn: (r) => r._field  =~ /ch[1-8]$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 11
          widthRatio: 1
          xCol: _time
          yCol: _value
          yPos: 17
        - axes:
            - base: "10"
              name: x
              scale: linear
            - name: "y"
              scale: linear
              suffix: €/h
          colorMapping:
            mean-: '#31C0F6'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: mAkEIg6DOriFkyHYpaHe1
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: F9pqxdAjfZSEnEnQ_8rWI
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: bvaK86JA4QnVgxkoFWiq-
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 5
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: Energy value per hour (net value, no margins or tax)
          note: Requires energy meter (Shelly 3EM) and price data from EntsoE
          noteOnEmpty: true
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                PowerIn = from(bucket: "arska")
                |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                |> filter(fn: (r) => r["_measurement"] == "period_avg")
                |> filter(fn: (r) => r["_field"] == "sellingWh")
                |> aggregateWindow(every: 1h,fn: mean, createEmpty: false)


                Price = from(bucket: "arska")
                |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                |> filter(fn: (r) => r["_measurement"] == "period_price")
                |> filter(fn: (r) => r["_field"] == "price")
                |> aggregateWindow(every: 1h ,fn: mean, createEmpty: false)

                EnergyValue = join(tables: {PowerIn: PowerIn, Price: Price}, on: ["_time"])
                |> map(fn: (r) => ({_time: r._time,_value: r._value_PowerIn * r._value_Price/100000.0}))
                |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 9
          widthRatio: 1
          xCol: _time
          yCol: _value
          yPos: 22
        - axes:
            - base: "10"
              name: x
              scale: linear
            - name: "y"
              scale: linear
              suffix: €
          colorMapping:
            sum-: '#31C0F6'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: mAkEIg6DOriFkyHYpaHe1
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: F9pqxdAjfZSEnEnQ_8rWI
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: bvaK86JA4QnVgxkoFWiq-
              name: Nineteen Eighty Four
              type: scale
          geom: step
          height: 5
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: Energy value per day (net value, no margins or tax)
          note: Requires energy meter (Shelly 3EM) and price data from EntsoE
          noteOnEmpty: true
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                PowerIn = from(bucket: "arska")
                |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                |> filter(fn: (r) =>  r["_measurement"] == "period_avg")
                |> filter(fn: (r) => r["_field"] == "sellingWh")
                |> aggregateWindow(every: 1h,fn: mean, createEmpty: false)


                Price = from(bucket: "arska")
                |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                |> filter(fn: (r) => r["_measurement"] == "period_price")
                |> filter(fn: (r) => r["_field"] == "price")
                |> aggregateWindow(every: 1h ,fn: mean, createEmpty: false)

                EnergyValue = join(tables: {PowerIn: PowerIn, Price: Price}, on: ["_time"])
                |> map(fn: (r) => ({_time: r._time,_value: r._value_PowerIn * r._value_Price/100000.0}))
                |> aggregateWindow(every: 1d ,fn: sum, createEmpty: false)
                |> yield(name: "sum")|
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 9
          widthRatio: 1
          xCol: _time
          yCol: _value
          yPos: 27
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
              suffix: ℃
          colorMapping: {}
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: VVi1Ov5qRae5HS6Fs4fHH
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: zJnrn82XlykSoE-mIslA9
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: QfjvSbdiYzQRS6xPdZJfc
              name: Nineteen Eighty Four
              type: scale
          geom: line
          height: 5
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: Sensor values
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "arska")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "sensors")
                  |> filter(fn: (r) => r._field  =~ /sensor[1-3]$/)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 9
          widthRatio: 1
          yPos: 32
        - axes:
            - base: "10"
              name: x
              scale: linear
            - base: "10"
              name: "y"
              scale: linear
          colorMapping:
            uptime-sensors-arska--mean-: '#31C0F6'
          colorizeRows: true
          colors:
            - hex: '#31C0F6'
              id: 10FrG7qhDlO4Qm_e1C7au
              name: Nineteen Eighty Four
              type: scale
            - hex: '#A500A5'
              id: XVoCkqGiebqt-McOacaoV
              name: Nineteen Eighty Four
              type: scale
            - hex: '#FF7E27'
              id: 55cbyMIZHjLce_8-Vsu3b
              name: Nineteen Eighty Four
              type: scale
          geom: line
          height: 4
          hoverDimension: auto
          kind: Xy
          legendColorizeRows: true
          legendOpacity: 1
          legendOrientationThreshold: 1e+08
          name: Debug - Uptime
          opacity: 1
          orientationThreshold: 1e+08
          position: overlaid
          queries:
            - query: |-
                from(bucket: "arska")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "sensors")
                  |> filter(fn: (r) => r["_field"] == "uptime")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> yield(name: "mean")
          staticLegend:
            colorizeRows: true
            opacity: 1
            orientationThreshold: 1e+08
            widthRatio: 1
          width: 9
          widthRatio: 1
          yPos: 37
    description: Basic graphs of energy export/import, energy value, price and channel utilization
    name: Arska Graphs
